{
  "_args": [
    [
      {
        "raw": "glslify@^6.0.2",
        "scope": null,
        "escapedName": "glslify",
        "name": "glslify",
        "rawSpec": "^6.0.2",
        "spec": ">=6.0.2 <7.0.0",
        "type": "range"
      },
      "/home/seshu/dev/ProjectileMotion/src/node_modules/gl-error3d"
    ]
  ],
  "_from": "glslify@>=6.0.2 <7.0.0",
  "_id": "glslify@6.1.0",
  "_inCache": true,
  "_location": "/gl-error3d/glslify",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/glslify-6.1.0.tgz_1496275995684_0.264421051600948"
  },
  "_npmUser": {
    "name": "hughsk",
    "email": "hughskennedy@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "glslify@^6.0.2",
    "scope": null,
    "escapedName": "glslify",
    "name": "glslify",
    "rawSpec": "^6.0.2",
    "spec": ">=6.0.2 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gl-error3d"
  ],
  "_resolved": "https://registry.npmjs.org/glslify/-/glslify-6.1.0.tgz",
  "_shasum": "cdffcfd2a6571722128d3d13356c136de6ce9742",
  "_shrinkwrap": null,
  "_spec": "glslify@^6.0.2",
  "_where": "/home/seshu/dev/ProjectileMotion/src/node_modules/gl-error3d",
  "authors": [
    "Hugh Kennedy <hughskennedy@gmail.com> (http://hughsk.io/)",
    "Mikola Lysenko <mikolalysenko@gmail.com> (http://0fps.net)",
    "Chris Dickinson <chris@neversaw.us> (http://neversaw.us)"
  ],
  "bin": {
    "glslify": "bin.js"
  },
  "browser": {
    "index.js": "./browser.js"
  },
  "bugs": {
    "url": "https://github.com/stackgl/glslify/issues"
  },
  "dependencies": {
    "bl": "^1.0.0",
    "concat-stream": "^1.5.2",
    "duplexify": "^3.4.5",
    "falafel": "^2.0.0",
    "from2": "^2.3.0",
    "glsl-resolve": "0.0.1",
    "glsl-token-whitespace-trim": "^1.0.0",
    "glslify-bundle": "^5.0.0",
    "glslify-deps": "^1.2.5",
    "minimist": "^1.2.0",
    "resolve": "^1.1.5",
    "stack-trace": "0.0.9",
    "static-eval": "^1.1.1",
    "tape": "^4.6.0",
    "through2": "^2.0.1",
    "xtend": "^4.0.0"
  },
  "description": "A node.js-style module system for GLSL!",
  "devDependencies": {
    "browserify": "^12.0.1",
    "electron-prebuilt": "^1.3.3",
    "electron-spawn": "^5.0.0",
    "from2": "^2.3.0",
    "glsl-easings": "^1.0.0",
    "glsl-noise": "0.0.0",
    "glslify-hex": "^2.0.1",
    "shell-quote": "^1.4.3",
    "tap-spec": "^2.2.1",
    "tape": "^3.5.0",
    "uniq": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "cdffcfd2a6571722128d3d13356c136de6ce9742",
    "tarball": "https://registry.npmjs.org/glslify/-/glslify-6.1.0.tgz"
  },
  "gitHead": "bc4151b9f2640b7de97f86aa1744455c99c4fb2d",
  "homepage": "https://github.com/stackgl/glslify",
  "keywords": [
    "ecosystem:stackgl",
    "browserify-transform",
    "glslify",
    "glsl",
    "module",
    "system",
    "cli",
    "shader",
    "webgl"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chrisdickinson",
      "email": "chris@neversaw.us"
    },
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    },
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    },
    {
      "name": "mikkoh",
      "email": "me@mikkoh.com"
    },
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    },
    {
      "name": "rezaali",
      "email": "syed.reza.ali@gmail.com"
    },
    {
      "name": "substack",
      "email": "substack@gmail.com"
    },
    {
      "name": "tatumcreative",
      "email": "tatum.creative@gmail.com"
    },
    {
      "name": "thibauts",
      "email": "thibaut.seguy@gmail.com"
    },
    {
      "name": "wwwtyro",
      "email": "wwwtyro@gmail.com"
    },
    {
      "name": "yoshuawuyts",
      "email": "i@yoshuawuyts.com"
    }
  ],
  "name": "glslify",
  "optionalDependencies": {},
  "readme": "# glslify [![stability][0]][1]\n[![npm version][2]][3] [![downloads][4]][5]\n\nA node.js-style module system for GLSL!\n\nThis module contains:\n\n* glslify's command-line interface (CLI)\n* glslify node/electron interface\n* [browserify](http://browserify.org/) transform\n\nIt forms one of the core components of the [stack.gl](http://stack.gl/)\necosystem, allowing you to install GLSL modules from [npm](http://npmjs.com) and\nuse them in your shaders. This makes it trivial to piece together different\neffects and techniques from the community, including but certainly not limited\nto\n[fog](https://github.com/hughsk/glsl-fog),\n[noise](https://github.com/hughsk/glsl-noise),\n[film grain](https://github.com/mattdesl/glsl-film-grain),\n[raymarching helpers](https://github.com/stackgl/glsl-smooth-min),\n[easing functions](https://github.com/stackgl/glsl-easings) and\n[lighting models](https://github.com/stackgl/glsl-specular-cook-torrance).\n\nA full list can be found on the [stack.gl packages list](http://stack.gl/packages)\nunder the \"Shader Components\" category.\n\nBecause glslify just outputs a single shader file as a string, it's easy to use\nit with any WebGL framework of your choosing,\nprovided they accept custom shaders. Integration is planned for\n[three.js](http://threejs.org/) and\n[pex](http://vorg.github.io/pex/), with more on the way!\n[Open an issue](https://github.com/stackgl/glslify/issues/new) here if you'd like to\ndiscuss integrating glslify with your platform of choice.\n\n*If you're interested in playing around with glslify, you should check out\n[glslb.in](http://glslb.in/): it's a fragment shader sandbox similar to\n[Shadertoy](http://shadertoy.com/) and\n[GLSL Sandbox](http://glslsandbox.com/)\nwith built in support for glslify.*\n\n## Example\n\n``` javascript\nvar glsl = require('glslify')\nconsole.log(glsl`\n  #pragma glslify: noise = require('glsl-noise/simplex/3d')\n\n  precision mediump float;\n  varying vec3 vpos;\n  void main () {\n    gl_FragColor = vec4(noise(vpos*25.0),1);\n  }\n`)\n```\n\n## Module API\n\n``` javascript\nvar glsl = require('glslify')\n```\n\n### var src = `glsl\\`shader source...\\``\n\nCompile a shader inline using `glsl` as a\n[tagged template string function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals).\n\n### var src = glsl(file, opts)\n### var src = glsl(shaderSource, opts)\n\nCompile a shader using an inline shader string or a file name.\n\nThese are convencience methods provided that call `glsl.compile()` or\n`glsl.file()` accordingly. These methods are also provided for backwards\ncompatibility with the previous `< 6` interface.\n\nOptionally provide:\n\n* `opts.basedir` - directory to resolve relative paths\n* `opts.transform` - an array of transform functions, transform module name\n\n### var src = glsl.compile(src, opts)\n\nCompile a shader string from a string `src`.\n\n* `opts.basedir` - directory to resolve relative paths in `src`\n* `opts.transform` - an array of transform functions, transform module name\nstrings, or `[trname,tropts]` pairs\n\n### var src = glsl.file(filename, opts)\n\nCompile a shader from a `filename`.\n\n* `opts.basedir` - directory to resolve relative paths in `src`\n* `opts.transform` - an array of transform functions, transform module name\nstrings, or `[trname,tropts]` pairs\n\n## Installation\n\n[![NPM](https://nodei.co/npm/glslify.png)](https://nodei.co/npm/glslify/)\n\nTo install the command-line interface, install glslify globally like\nso:\n\n``` bash\nnpm install -g glslify\n```\n\nTo install glslify for use as a browserify transform, you should\ninstall it locally instead:\n\n``` bash\nnpm install glslify\n```\n\n## Getting Started\n\n### CLI\n\nThe CLI can take a file as its first argument, and output to a file\nusing the `-o` flag:\n\n``` bash\nglslify index.glsl -o output.glsl\n```\n\nIt can also read input from stdin and output to stdout:\n\n``` bash\ncat index.glsl | glslify > output.glsl\n```\n\n### Browserify Transform\n\nIf using browserify from the command-line, simply pass glslify\nin as a transform using the `-t`/`--transform` flag:\n\n``` bash\nbrowserify -t glslify index.js -o bundle.js\n```\n\nAlternatively, you may include glslify as a `browserify.transform`\nin your `package.json` file:\n\n``` json\n{\n  \"name\": \"my-app\",\n  \"dependencies\": {\n    \"glslify\": \"^2.0.0\"\n  },\n  \"browserify\": {\n    \"transform\": [\"glslify\"]\n  }\n}\n```\n\nWhen writing your app, you should be able to require and call\nglslify the same as the node/electron interface, like so:\n\n``` javascript\n// index.js\nvar glsl = require('glslify')\n\nvar src = glsl.file('./shader.glsl')\nconsole.log(src)\n```\n\nor using tagged template strings:\n\n``` javascript\nvar glsl = require('glslify')\nconsole.log(glsl`\n  #pragma glslify: noise = require('glsl-noise/simplex/3d')\n\n  precision mediump float;\n  varying vec3 vpos;\n  void main () {\n    gl_FragColor = vec4(noise(vpos*25.0),1);\n  }\n`)\n```\n\nYour glslify calls will be replaced with bundled GLSL strings\nat build time automatically for you!\n\n``` javascript\n// index.js\nvar src = \"#define GLSLIFY 1\\n\\nprecision mediump float; ...\"\n\nconsole.log(src)\n```\n\n### [Webpack](http://webpack.github.io/) Loader\n\nYou can use the\n[glslify-loader](https://github.com/stackgl/glslify-loader)\nmodule to bundle shaders through glslify with Webpack. Check out\n[the repository](https://github.com/stackgl/glslify-loader)\nfor further information.\n\n### [Babel](https://babeljs.io) Plugin\n\nYou can use [glslify-babel](https://github.com/stackgl/glslify-babel) as a Babel plugin.  This allows you to use all ES6 features with glslify, including `import` statements and tagged template strings.  Check out [the repository](https://github.com/stackgl/glslify-babel) to learn more.\n\n## Usage\n\n\n### Installing a GLSL Module\n\nMuch like plain JavaScript modules, GLSL modules are stored on npm.\nThe main difference is that GLSL modules contain an `index.glsl` file\ninstead of an `index.js`. Generally, these modules start with `glsl-`\nin their name.\n\nTo install [glsl-noise](https://github.com/hughsk/glsl-noise) in\nyour current directory:\n\n``` bash\nnpm install glsl-noise\n```\n\nThis will download glsl-noise and any of its dependencies, placing\nthem in a `node_modules` directory for glslify to use.\n\n### Importing a GLSL Module\n\nYou can import a module using the following `#pragma` syntax:\n\n``` glsl\n#pragma glslify: noise = require(glsl-noise/simplex/2d)\n\nvoid main() {\n  float brightness = noise(gl_FragCoord.xy);\n\n  gl_FragColor = vec4(vec3(brightness), 1.);\n}\n```\n\nShader dependencies are resolved using the same algorithm\nas node, so the above will load `./node_modules/simplex/2d.glsl`\nfrom the shader's directory.\n\nThe above example would result in the following output:\n\n``` glsl\n#define GLSLIFY 1\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_1_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_1_1(vec3 x) {\n  return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_1_2(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_1_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_1_1( permute_1_1( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n\nvoid main() {\n  float brightness = snoise_1_2(gl_FragCoord.xy);\n\n  gl_FragColor = vec4(vec3(brightness), 1.);\n}\n```\n\n### Exporting a GLSL Module\n\nYou can export a token from a module using the `glslify: export`\npragma, like so:\n\n``` glsl\nfloat myFunction(vec3 normal) {\n  return dot(vec3(0, 1, 0), normal);\n}\n\n#pragma glslify: export(myFunction)\n```\n\nThis means that when you import this module file elsewhere, you'll\nget `myFunction` in return:\n\n``` glsl\n#pragma glslify: topDot = require(./my-function.glsl)\n\ntopDot(vec3(0, 1, 0)); // 1\n```\n\nIf you check the output shader source, you'll notice that variables\nhave been renamed to avoid conflicts between multiple shader files.\n\nYou're not limited to exporting functions either: you should be able\nto export any GLSL token, such as a struct for reuse between your\nmodules:\n\n``` glsl\nstruct Light {\n  vec3 position;\n  vec3 color;\n};\n\n#pragma glslify: export(Light)\n```\n\n### Passing references between modules\nNormally, glslify renames tokens to avoid conflicts across contexts.  Sometimes, however, you want to reference the same thing from different contexts.  The `require` function lets you explicitly fix reference names in order to guarantee that two different modules are talking about the same reference.\n\nGive `some-module` access to locally declared `bar` whenever it looks for `foo` internally:\n``` glsl\nint bar;\n#pragma glslify: require('some-module',foo=bar,...)\n```\nIt's important to make sure that `bar` has already been declared when you invoke `#pragma glslify: require(...)`.\n\nNow time for some imagination.  Let's pretend that we have some `float[500]` arrays that we'd like to be summed up.\n\nHere's a module that performs a reduction using a function `map`.\n``` glsl\nfloat accumulate(float list[N]) {\n  float z = 0;\n  for (int i = 0; i<N; i++) {\n    z = map(z,list[i]);\n  }\n  return z;\n}\n#pragma glslify: export(accumulate)\n```\nBut notice that this module doesn't actually declare `const int N;` or define a function `map` anywhere.  We have to make sure they are already defined when we require the module, and pass their names along with the `require` function:\n\n``` glsl\nconst int M = 500;\nfloat add(float a, float b){ return a+b; }\n\n#pragma glslify: sum500 = require('./accumulator.glsl',N=M,map=add)\n```\nThe accumulator has been imported and glslified into a `sum` function.  We can also multiply all of the floats in some `float[17]` arrays the same way:\n``` glsl\nconst int M = 500;\nconst int L = 17;\nfloat add(float a, float b){ return a+b; }\nfloat mul(float a, float b){ return a*b; }\n\n#pragma glslify: sum500 = require('./accumulator.glsl',N=M,map=add)\n#pragma glslify: product17 = require('./accumulator.glsl',N=L,map=mul)\n```\n\n[Glsl-hash-blur](http://stack.gl/packages/#stackgl/glsl-hash-blur) is an example of a module that uses this feature.\n\n## Source Transforms\n\nSource transforms are a feature inspired by browserify, allowing you to\nmodify your GLSL source at build time on a per-package basis. This is\nuseful both for transpilation (e.g. converting from or to\n[HLSL](http://en.wikipedia.org/wiki/High-Level_Shading_Language)) or for\nmaking incremental improvements to GLSL syntax. (e.g. you can use\n[glslify-hex](https://github.com/hughsk/glslify-hex) to include CSS-style\nhex strings for colors in place of `vec3`s).\n\nThere are three kinds of source transform:\n\n* **Local transforms**, the default. These are applied per-file, and only\n  applied to a single package. If you're defining it via the CLI using `-t`\n  it'll only apply itself to files outside of `node_modules`, but you\n  can include it in `package.json` too: these will be applied only to that\n  package without interfering with any of the package's parents or children.\n* **Global transforms** are applied after local transforms to every file,\n  regardless of whether or not it's a dependency.\n* **Post transforms** are applied to the entire output file once it's been\n  bundled. Generally, you want to reserve this for very specific use cases\n  such as whole-shader optimisation.\n\nThere are a number of ways to use a transform. Start by\ninstalling it in your project:\n\n``` bash\nnpm install --save glslify-hex\n```\n\nThe preferred way to enable a transform is through your project's\n`package.json` file's `glslify.transform` property, like so:\n\n``` json\n{\n  \"name\": \"my-project\",\n  \"dependencies\": {\n    \"glslify-hex\": \"^2.0.0\",\n    \"glslify\": \"^2.0.0\"\n  },\n  \"glslify\": {\n    \"transform\": [\"glslify-hex\"]\n  }\n}\n```\n\nYou may also include arguments to your transform as you would\nwith browserify:\n\n``` json\n{\n  \"name\": \"my-project\",\n  \"dependencies\": {\n    \"glslify-hex\": \"^2.0.0\",\n    \"glslify\": \"^2.0.0\"\n  },\n  \"glslify\": {\n    \"transform\": [\n      [\"glslify-hex\", {\n        \"option-1\": true,\n        \"option-2\": 42\n      }]\n    ]\n  }\n}\n```\n\nNote that this method is only available for local transforms.\n\nYou may also specify transforms via the CLI:\n\n``` bash\nglslify -t 'local-transform' -g 'global-transform' -p 'post-transform'\n```\n\nOr when using the browserify transform by including them as\noptions like so:\n\n``` javascript\nvar glslify = require('glslify')\n\nglslify.file(__dirname + '/shader.glsl', {\n  transform: [\n    [\"glslify-hex\", {\n      \"option-1\": true,\n      \"option-2\": 42\n    }],\n    [\"global-transform\", { global: true }],\n    [\"post-transform\", { post: true }]\n  ]\n})\n```\n\n## Further Reading\n\n* [stack.gl Packages List](http://stack.gl/packages/) (see \"Shader Components\").\n* [Modular and Versioned GLSL](http://mattdesl.svbtle.com/glslify) by [@mattdesl](http://mattdesl.svbtle.com/).\n* [Module Best Practices](https://github.com/mattdesl/module-best-practices) by [@mattdesl](http://mattdesl.svbtle.com/).\n* [Art of Node](https://github.com/maxogden/art-of-node) by [@maxogden](http://github.com/maxogden).\n* [Browserify Handbook](https://github.com/substack/browserify-handbook) by [@substack](http://substack.net).\n* [WebGL Insights](http://www.amazon.com/WebGL-Insights-Patrick-Cozzi/dp/1498716075) includes a chapter introducing glslify in detail.\n* [Shader School](http://github.com/stackgl/shader-school) by [@mikolalysenko](http://github.com/mikolalysenko), [chrisdickinson](http://github.com/chrisdickinson) and [@hughskennedy](http://github.com/hughskennedy).\n* [Book of Shaders](http://patriciogonzalezvivo.com/2015/thebookofshaders/) by [Patricio Gonzalez Vivo](http://patriciogonzalezvivo.com/).\n* [Pragmatic Physically Based Rendering](http://marcinignac.com/blog/pragmatic-pbr-setup-and-gamma/) by [@marcinignac](http://http://marcinignac.com/).\n* [glslifyでGLSLをモジュール化しよう](http://qiita.com/yuichiroharai/items/ecbfd2d7729c7384fb3a) by [@yuichiroharaiJP](http://www.yuichiroharai.com/).\n\n\n## glslify in the Wild\n\n* [Plotly](https://plot.ly/)\n* [Audiograph](http://audiograph.xyz/)\n* [KAMRA: Deja Vu](https://kamra.invisi-dir.com/)\n* [Swiss Army Man](http://swissarmyman.com/)\n* [Connecting Europe](https://collectingeurope.net/)\n* [Kuva](https://www.kuva.io/)\n* [The Law of The Jungle](http://thelawofthejungle.com/)\n* [Make Me Pulse](http://2016.makemepulse.com)\n* [SMASHING Mega Scene](https://github.com/edankwan/SMASHING-Mega-Scene)\n* [Takumi Hasegawa](https://tkmh.me/)\n* [ectoplasmid](https://hughsk.io/ectoplasmid)\n* [glslb.in](http://glslb.in/)\n* [N|Solid](https://nodesource.com/products/nsolid)\n\n## Contributing\n\nSee [stackgl/contributing](https://github.com/stackgl/contributing) for details.\n\n## License\n\nMIT. See [LICENSE.md](http://github.com/stackgl/glslify/blob/master/LICENSE.md) for details.\n\n[0]: https://img.shields.io/badge/stability-2%20stable-brightgreen.svg?style=flat-square\n[1]: https://nodejs.org/api/documentation.html#documentation_stability_index\n[2]: https://img.shields.io/npm/v/glslify.svg?style=flat-square\n[3]: https://npmjs.org/package/glslify\n[4]: http://img.shields.io/npm/dm/glslify.svg?style=flat-square\n[5]: https://npmjs.org/package/glslify\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/glslify.git"
  },
  "scripts": {
    "test": "npm run test-node && npm run test-electron",
    "test-electron": "test/electron.sh",
    "test-node": "node test | tap-spec"
  },
  "version": "6.1.0"
}
